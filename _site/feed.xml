<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-03-09T17:45:06+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">bayan blog</title><subtitle>Developping journey</subtitle><entry><title type="html">Java Coding Tips</title><link href="http://localhost:4000/jekyll/update/tip/2024/03/09/java-coding-tips.html" rel="alternate" type="text/html" title="Java Coding Tips" /><published>2024-03-09T17:37:58+08:00</published><updated>2024-03-09T17:37:58+08:00</updated><id>http://localhost:4000/jekyll/update/tip/2024/03/09/java-coding-tips</id><content type="html" xml:base="http://localhost:4000/jekyll/update/tip/2024/03/09/java-coding-tips.html"><![CDATA[<h2 id="use-less-targetsetxxsourcegetxx">Use less target.setXX(source.getXX)</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// when you want to use less target.setXX(source.getXX), same name</span>
<span class="nc">BeanUtils</span><span class="o">.</span><span class="na">copyProperties</span><span class="o">(</span><span class="n">source</span><span class="o">,</span> <span class="n">target</span><span class="o">)</span>
</code></pre></div></div>
<h2 id="manipulate-array">Manipulate Array</h2>
<h3 id="copy-array">copy array</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//  most efficient(recommend)</span>
<span class="kt">void</span> <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">srcArr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">srcBeginPos</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">resArr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">resBeginPos</span><span class="o">,</span> <span class="kt">int</span> <span class="n">length</span><span class="o">)</span>
  
<span class="kt">int</span><span class="o">[]</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">array</span><span class="o">,</span> <span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span>
  
<span class="c1">// to increase array size, idle will be fullfilled with 0</span>
<span class="kt">int</span><span class="o">[]</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">srcArr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">newArrLength</span><span class="o">)</span>
</code></pre></div></div>
<h3 id="array---list">array -&gt; list</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">ints</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">};</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">ints</span><span class="o">).</span><span class="na">boxed</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
</code></pre></div></div>
<h3 id="list---array">list -&gt; array</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span><span class="o">[]</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">toArray</span><span class="o">(</span><span class="nc">String</span><span class="o">[]::</span><span class="k">new</span><span class="o">);</span>
<span class="nc">Array</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">intValue</span><span class="o">).</span><span class="na">toArray</span><span class="o">()</span>
</code></pre></div></div>
<h3 id="distinct-array">distinct array</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">arr</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">arr</span><span class="o">).</span><span class="na">distinct</span><span class="o">().</span><span class="na">toArray</span><span class="o">();</span>
</code></pre></div></div>
<h3 id="sort-object-array-in-descending-order">sort object array in descending order</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span><span class="o">[]</span> <span class="n">cubes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">[]</span> <span class="o">{</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">27</span><span class="o">,</span> <span class="mi">64</span><span class="o">,</span> <span class="mi">125</span><span class="o">,</span> <span class="mi">256</span> <span class="o">};</span> 
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">cubes</span><span class="o">,</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">());</span>
</code></pre></div></div>
<p><a href="https://www.java67.com/2016/07/how-to-sort-array-in-descending-order-in-java.html#ixzz8Greh6ggX">Read more</a></p>

<h3 id="sort-primitive-array-in-descending-order">sort primitive array in descending order</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">arr</span><span class="o">);</span>
<span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span>
<span class="kt">int</span> <span class="n">temp</span><span class="o">;</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">/</span><span class="mi">2</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
	<span class="n">temp</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
	<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">arr</span><span class="o">[</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
	<span class="n">arr</span><span class="o">[</span><span class="n">n</span> <span class="o">-</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="get-maxmin-of-an-array">Get max/min of an array</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">arr</span><span class="o">).</span><span class="na">max</span><span class="o">().</span><span class="na">getAsInt</span><span class="o">();</span>
</code></pre></div></div>
<h3 id="hashset-to-list">HashSet to List</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">();</span>
<span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
<span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
<span class="c1">// when specify the type of list use toCollection(ArrayList::new)</span>
<span class="n">set</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toCollection</span><span class="o">(</span><span class="nl">ArrayList:</span><span class="o">:</span><span class="k">new</span><span class="o">));</span>
</code></pre></div></div>
<h2 id="bit-manipulate">Bit Manipulate</h2>

<p>get highest int</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span><span class="o">.</span><span class="na">highestOneBit</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">);</span>
</code></pre></div></div>

<p>set k-th bit as 0</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="o">~</span> <span class="o">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">k</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">n</span><span class="o">;</span>
</code></pre></div></div>

<p>traverse all possibilties of set bits</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">submask</span> <span class="o">=</span> <span class="n">mask</span><span class="o">;</span> <span class="n">submask</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">submask</span> <span class="o">=</span> <span class="o">(</span><span class="n">submask</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">&amp;</span> <span class="n">mask</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// do something</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><category term="tip" /><summary type="html"><![CDATA[Use less target.setXX(source.getXX) // when you want to use less target.setXX(source.getXX), same name BeanUtils.copyProperties(source, target) Manipulate Array copy array // most efficient(recommend) void System.arraycopy(int[] srcArr, int srcBeginPos, int[] resArr, int resBeginPos, int length) int[] Arrays.copyOfRange(int[] array, int start, int end) // to increase array size, idle will be fullfilled with 0 int[] Arrays.copyOf(int[] srcArr, int newArrLength) array -&gt; list int[] ints = {1,2,3}; List&lt;Integer&gt; list = Arrays.stream(ints).boxed().collect(Collectors.toList()); list -&gt; array]]></summary></entry><entry><title type="html">Operator Precedence in Java</title><link href="http://localhost:4000/jekyll/update/2024/03/09/operator-precedence-in-java.html" rel="alternate" type="text/html" title="Operator Precedence in Java" /><published>2024-03-09T15:45:58+08:00</published><updated>2024-03-09T15:45:58+08:00</updated><id>http://localhost:4000/jekyll/update/2024/03/09/operator-precedence-in-java</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/03/09/operator-precedence-in-java.html"><![CDATA[<table>
  <thead>
    <tr>
      <th>Level</th>
      <th>Operator</th>
      <th>Description</th>
      <th>Associativity</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><strong>16</strong></td>
      <td><code class="language-plaintext highlighter-rouge">()</code> <code class="language-plaintext highlighter-rouge">[]</code> <code class="language-plaintext highlighter-rouge">.</code></td>
      <td>parentheses array access member access</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>15</strong></td>
      <td><code class="language-plaintext highlighter-rouge">++</code> <code class="language-plaintext highlighter-rouge">--</code></td>
      <td>unary post-increment unary post-decrement</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>14</strong></td>
      <td><code class="language-plaintext highlighter-rouge">+</code> <code class="language-plaintext highlighter-rouge">-</code> <code class="language-plaintext highlighter-rouge">!</code> <code class="language-plaintext highlighter-rouge">~</code> <code class="language-plaintext highlighter-rouge">++</code> <code class="language-plaintext highlighter-rouge">--</code></td>
      <td>unary plus unary minus unary logical NOT unary bitwise NOT unary pre-increment unary pre-decrement</td>
      <td>right-to-left</td>
    </tr>
    <tr>
      <td><strong>13</strong></td>
      <td><code class="language-plaintext highlighter-rouge">()</code> <code class="language-plaintext highlighter-rouge">new</code></td>
      <td>cast object creation</td>
      <td>right-to-left</td>
    </tr>
    <tr>
      <td><strong>12</strong></td>
      <td><code class="language-plaintext highlighter-rouge">*</code> <code class="language-plaintext highlighter-rouge">/</code> <code class="language-plaintext highlighter-rouge">%</code></td>
      <td>multiplicative</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>11</strong></td>
      <td><code class="language-plaintext highlighter-rouge">+ -</code> <code class="language-plaintext highlighter-rouge">+</code></td>
      <td>additive string concatenation</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>10</strong></td>
      <td><code class="language-plaintext highlighter-rouge">&lt;&lt; &gt;&gt;</code> <code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;</code></td>
      <td>shift</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>9</strong></td>
      <td><code class="language-plaintext highlighter-rouge">&lt; &lt;=</code> <code class="language-plaintext highlighter-rouge">&gt; &gt;=</code> <code class="language-plaintext highlighter-rouge">instanceof</code></td>
      <td>relational</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>8</strong></td>
      <td><code class="language-plaintext highlighter-rouge">==</code> <code class="language-plaintext highlighter-rouge">!=</code></td>
      <td>equality</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>7</strong></td>
      <td><code class="language-plaintext highlighter-rouge">&amp;</code></td>
      <td>bitwise AND</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>6</strong></td>
      <td><code class="language-plaintext highlighter-rouge">^</code></td>
      <td>bitwise XOR</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>5</strong></td>
      <td><code class="language-plaintext highlighter-rouge">|</code></td>
      <td>bitwise OR</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>4</strong></td>
      <td><code class="language-plaintext highlighter-rouge">&amp;&amp;</code></td>
      <td>logical AND</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>3</strong></td>
      <td><code class="language-plaintext highlighter-rouge">||</code></td>
      <td>logical OR</td>
      <td>left-to-right</td>
    </tr>
    <tr>
      <td><strong>2</strong></td>
      <td><code class="language-plaintext highlighter-rouge">?:</code></td>
      <td>ternary</td>
      <td>right-to-left</td>
    </tr>
    <tr>
      <td><strong>1</strong></td>
      <td><code class="language-plaintext highlighter-rouge">=</code> <code class="language-plaintext highlighter-rouge">+=</code> <code class="language-plaintext highlighter-rouge">-=</code> <code class="language-plaintext highlighter-rouge">*=</code> <code class="language-plaintext highlighter-rouge">/=</code> <code class="language-plaintext highlighter-rouge">%=</code> <code class="language-plaintext highlighter-rouge">&amp;=</code> <code class="language-plaintext highlighter-rouge">^=</code> <code class="language-plaintext highlighter-rouge">|=</code> <code class="language-plaintext highlighter-rouge">&lt;&lt;=</code> <code class="language-plaintext highlighter-rouge">&gt;&gt;=</code> <code class="language-plaintext highlighter-rouge">&gt;&gt;&gt;=</code></td>
      <td>assignment</td>
      <td>right-to-left</td>
    </tr>
    <tr>
      <td><strong>0</strong></td>
      <td><code class="language-plaintext highlighter-rouge">-&gt;</code></td>
      <td>lambda expression arrow</td>
      <td>right-to-left</td>
    </tr>
  </tbody>
</table>

<h3 id="see-also">See Also</h3>

<ul>
  <li><a href="https://introcs.cs.princeton.edu/java/11precedence/">Operator Precedence in Java, princeton</a></li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Level Operator Description Associativity 16 () [] . parentheses array access member access left-to-right 15 ++ -- unary post-increment unary post-decrement left-to-right 14 + - ! ~ ++ -- unary plus unary minus unary logical NOT unary bitwise NOT unary pre-increment unary pre-decrement right-to-left 13 () new cast object creation right-to-left 12 * / % multiplicative left-to-right 11 + - + additive string concatenation left-to-right 10 &lt;&lt; &gt;&gt; &gt;&gt;&gt; shift left-to-right 9 &lt; &lt;= &gt; &gt;= instanceof relational left-to-right 8 == != equality left-to-right 7 &amp; bitwise AND left-to-right 6 ^ bitwise XOR left-to-right 5 | bitwise OR left-to-right 4 &amp;&amp; logical AND left-to-right 3 || logical OR left-to-right 2 ?: ternary right-to-left 1 = += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= assignment right-to-left 0 -&gt; lambda expression arrow right-to-left]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2024/02/24/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2024-02-24T13:50:58+08:00</published><updated>2024-02-24T13:50:58+08:00</updated><id>http://localhost:4000/jekyll/update/2024/02/24/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/02/24/welcome-to-jekyll.html"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>Jekyll requires blog post files to be named according to the following format:</p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p>Where <code class="language-plaintext highlighter-rouge">YEAR</code> is a four-digit number, <code class="language-plaintext highlighter-rouge">MONTH</code> and <code class="language-plaintext highlighter-rouge">DAY</code> are both two-digit numbers, and <code class="language-plaintext highlighter-rouge">MARKUP</code> is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry><entry><title type="html">Find &amp;amp; Select Multiple Occurrences in IntellJ IDEA</title><link href="http://localhost:4000/jekyll/update/2024/02/23/find-and-select-multiple-occurrences.html" rel="alternate" type="text/html" title="Find &amp;amp; Select Multiple Occurrences in IntellJ IDEA" /><published>2024-02-23T13:50:58+08:00</published><updated>2024-02-23T13:50:58+08:00</updated><id>http://localhost:4000/jekyll/update/2024/02/23/find-and-select-multiple-occurrences</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/02/23/find-and-select-multiple-occurrences.html"><![CDATA[<font color="gray" size="5">Select multiple occurrences of the same word and change them all at once</font>

<table>
  <thead>
    <tr>
      <th>For</th>
      <th>macOs</th>
      <th>Windows / Linux</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Select one by one</td>
      <td><code class="language-plaintext highlighter-rouge">⌃</code> <code class="language-plaintext highlighter-rouge">G</code></td>
      <td><code class="language-plaintext highlighter-rouge">Alt</code>  <code class="language-plaintext highlighter-rouge">J</code></td>
    </tr>
    <tr>
      <td>Select all</td>
      <td><code class="language-plaintext highlighter-rouge">⌘</code> <code class="language-plaintext highlighter-rouge">⌃</code> <code class="language-plaintext highlighter-rouge">G</code></td>
      <td><code class="language-plaintext highlighter-rouge">Ctrl</code> <code class="language-plaintext highlighter-rouge">Alt</code> <code class="language-plaintext highlighter-rouge">Shift</code> <code class="language-plaintext highlighter-rouge">J</code></td>
    </tr>
  </tbody>
</table>

<h3 id="see-also">See Also</h3>

<ul>
  <li>
    <p><a href="https://www.jetbrains.com/help/idea/multicursor.html?#multiple_words">(documentation) IntelliJ IDEA Help - Multiple cursors and selection ranges</a></p>
  </li>
  <li>
    <p><a href="https://www.jetbrains.com/guide/java/tips/find-select-multiple-occurrences/#:~:text=You%20can%20use%20⌘⌃,from%20the%20last%20selected%20occurrence.">Find &amp; Select Multiple Occurrences</a></p>
  </li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Select multiple occurrences of the same word and change them all at once]]></summary></entry></feed>